@page "/tareas"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using TareasDomesticas.Models


<link href="css/styles.css" rel="stylesheet" />

<style>
    .bold-text {
        font-weight: bold;
    }
    .card-label {
    font-weight: bold;
    color: rgb(27, 27, 27); /* Cambia el color según tus preferencias */
    /* Agrega otros estilos según sea necesario */
}
</style>
    

<div class="container">
    <div class="card shadow-lg mt-3">
        <div class="card-header" style="background-color: rgba(212, 50, 112, 0.274);">
            <div class="card text-center" style="background-color: rgba(9, 92, 247, 0.041);">
                <h3>
                    <img src="Logo/logo.png" alt="Logo" style="max-width: 150px; vertical-align: middle; margin-right: 10px;" />
                    Tareas Asignadas 
                </h3>
            </div>
        </div>
        <div class="card-body" style="background-color:rgba(201, 141, 171, 0.377);">
            <div class="row">
                @if (tareas == null)
                {
                    <p class="text-center">Cargando tareas...</p>
                }
                else if (tareas.Count == 0)
                {
                    <p class="text-center">No hay tareas disponibles.</p>
                }
                else
                {
                    @foreach (var tarea in tareas.Select((value, index) => new { Value = value, Index = index }))
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card border-dark">
                                <div class="card-body" style="background-color: @(GetBackgroundColor(tarea.Value.estado))">

                                   <p class="card-text"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard-fill" viewBox="0 0 16 16"> <path fill-rule="evenodd" d="M10 1.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5zm-5 0A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5v1A1.5 1.5 0 0 1 9.5 4h-3A1.5 1.5 0 0 1 5 2.5zm-2 0h1v1A2.5 2.5 0 0 0 6.5 5h3A2.5 2.5 0 0 0 12 2.5v-1h1a2 2 0 0 1 2 2V14a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3.5a2 2 0 0 1 2-2"/> </svg> <span class="card-label">Descripción:</span> <span>@tarea.Value.descripcion</span></p>
                                   <p class="card-text"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-calendar2-week-fill" viewBox="0 0 16 16">
  <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5m9.954 3H2.545c-.3 0-.545.224-.545.5v1c0 .276.244.5.545.5h10.91c.3 0 .545-.224.545-.5v-1c0-.276-.244-.5-.546-.5M8.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5zm3 0a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5zM3 10.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5m3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5z"/>
</svg>   <span class="card-label">Fecha:</span> <span>@tarea.Value.fecha</span></p>
<p class="card-text"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
  <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6"/>
</svg>    <span class="card-label">Encargado:</span> <span>@tarea.Value.nombre</span></p>
<p class="card-text"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-segmented-nav" viewBox="0 0 16 16">
  <path d="M0 6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm6 3h4V5H6zm9-1V6a1 1 0 0 0-1-1h-3v4h3a1 1 0 0 0 1-1"/>
</svg><span class="card-label"> Estado:</span> <span>@GetEstado(tarea.Value.estado)</span></p>

                                     <!-- Botones -->
                                    <div class="d-flex justify-content-between mb-2">
                                        <!-- Agregar botón "Tomar Tarea" -->
                                        @if (tarea.Value.estado == "En Proceso" || tarea.Value.estado == "Terminada")
                                        {
                                            <button class="btn btn-tomar btn-sm mb-2" disabled><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key" viewBox="0 0 16 16">
  <path d="M0 8a4 4 0 0 1 7.465-2H14a.5.5 0 0 1 .354.146l1.5 1.5a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0L13 9.207l-.646.647a.5.5 0 0 1-.708 0L11 9.207l-.646.647a.5.5 0 0 1-.708 0L9 9.207l-.646.647A.5.5 0 0 1 8 10h-.535A4 4 0 0 1 0 8m4-3a3 3 0 1 0 2.712 4.285A.5.5 0 0 1 7.163 9h.63l.853-.854a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.793-.793-1-1h-6.63a.5.5 0 0 1-.451-.285A3 3 0 0 0 4 5"/>
  <path d="M4 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0"/>
</svg> Tomar Tarea</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-tomar btn-sm mb-2" @onclick="() => TomarTarea(tarea.Value.tareaId)"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key-fill" viewBox="0 0 16 16">
  <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2M2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2"/>
</svg> Tomar Tarea</button>
                                        }

                                        <!-- Botón "Ver Tarea" -->
                                        <button class="btn btn-custom btn-sm mb-2" @onclick="() => VerTareas(tarea.Value.tareaId)" disabled="@IsBotonVerDisabled(tarea.Value.estado)">Ver Tarea <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
  <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z"/>
</svg></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    List<TareasDto> tareas;

    protected override async Task OnInitializedAsync()
    {
        await CargarTareas();
    }

    public async Task CargarTareas()
    {
        tareas = await Http.GetFromJsonAsync<List<TareasDto>>("api/Tareas");
    }

    private void VerTareas(int tareaId)
    {
        NavigationManager.NavigateTo($"/editar/{tareaId}");
    }

    private async Task TomarTarea(int tareaId)
    {
        // Realizar lógica para cambiar el estado de "Por hacer" a "En proceso"
        // Por ejemplo:
        var tarea = tareas.FirstOrDefault(t => t.tareaId == tareaId);
        if (tarea != null)
        {
            tarea.estado = "En Proceso";
            // Realizar una solicitud PUT o POST al servidor para actualizar el estado de la tarea
            await Http.PutAsJsonAsync($"api/Tareas/{tareaId}", tarea);
        }
    }

    private string GetEstado(string estado)
    {
        switch (estado)
        {
            case "Por Hacer":
                return "Por Hacer";
            case "En Proceso":
                return "En Proceso";
            case "Terminada":
                return "Terminada";
            default:
                return "Desconocido";
        }
    }

    private string GetBackgroundColor(string estado)
    {
        switch (estado)
        {
            case "Por Hacer":
                return "#fd8c6a";  // Naranja claro
            case "En Proceso":
                return "rgba(255, 255, 0, 0.5)"; // Amarillo claro
            case "Terminada":
                return "rgba(76, 175, 80, 0.5)"; // Verde claro
            default:
                return "rgba(255, 255, 255, 0.5)"; // Blanco
        }
    }

    // Método para verificar si el botón "Ver Tarea" debe estar deshabilitado
    private bool IsBotonVerDisabled(string estado)
    {
        return estado == "Por Hacer";
    }
}
